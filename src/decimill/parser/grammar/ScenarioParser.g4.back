
parser grammar ScenarioParser;

@header {
    package decimill.parser;
    import decimill.expression.*;
    import decimill.scenario.*;
}

@members {
    Scenario scenario;
    TokenStreamRewriter buffer;
}

tokens {

    EOL, INLINE, BLOCK, ANY,

    UDIST,

    NAME, ID, NUM, EQ, PEQ, MEQ, TEQ, DEQ, COMMA, DOT, LPR, RPR,
    PLUS, MINUS, TIMES, DIV, POW, LT, GT, LBR, RBR, BNL,
    WS, BREAK, NL
}

parse [Scenario s, TokenStreamRewriter b]

    @init {
        scenario = s;
        buffer = b;
    }

    : start_line
    | EOF
    ;

start_line
    : BLOCK code_block
    | line
    | EOF
    ;

line
    : ANY line
    | INLINE code_inline BREAK line
    | EOL start_line
    | EOF
    ;

code_inline
    : ( change
        | assignment
        )
    | EOF
    ;

code_block
    : ( change
        | assignment
        )
        ( code_block_end
            | BNL code_block
            )
    | BNL code_block
    | code_block_end
    | EOF
    ;

code_block_end
    : NL start_line
    | EOF
    ;

change
    : expr_ref
        ( EQ BNL? expr_add                  { scenario.addChange($expr_ref.expr.toReference(), $expr_add.expr); }
        | PEQ BNL? expr_add                 { scenario.addChange($expr_ref.expr.toReference(), new PlusNode($expr_ref.expr, $expr_add.expr)); }
        | MEQ BNL? expr_add                 { scenario.addChange($expr_ref.expr.toReference(), new MinusNode($expr_ref.expr, $expr_add.expr)); }
        | TEQ BNL? expr_add                 { scenario.addChange($expr_ref.expr.toReference(), new TimesNode($expr_ref.expr, $expr_add.expr)); }
        | DEQ BNL? expr_add                 { scenario.addChange($expr_ref.expr.toReference(), new DivNode($expr_ref.expr, $expr_add.expr)); }
        )
    ;

assignment
    : expr_var EQ BNL? expr_add             { scenario.assign($expr_var.expr.getId(), $expr_add.expr); }
    ;

expr_add returns [ExprNode expr]
    : expr_sub                              { $expr = $expr_sub.expr; }
        ( BNL? PLUS BNL? expr_sub           { $expr = new PlusNode($expr, $expr_sub.expr); }
        )*
    ;

expr_sub returns [ExprNode expr]
    : expr_mult                             { $expr = $expr_mult.expr; }
        ( BNL? MINUS BNL? expr_mult         { $expr = new MinusNode($expr, $expr_mult.expr); }
        )*
    ;

expr_mult returns [ExprNode expr]
    : expr_div                              { $expr = $expr_div.expr; }
        ( BNL? TIMES BNL? expr_div          { $expr = new TimesNode($expr, $expr_div.expr); }
        )*
    ;

expr_div returns [ExprNode expr]
    : expr_pow                              { $expr = $expr_pow.expr; }
        ( BNL? DIV BNL? expr_pow            { $expr = new DivNode($expr, $expr_pow.expr); }
        )*
    ;

expr_pow returns [ExprNode expr]
    : expr_lt                               { $expr = $expr_lt.expr; }
        ( BNL? POW BNL? expr_lt             { $expr = new PowNode($expr, $expr_lt.expr); }
        )*
    ;

expr_lt returns [ExprNode expr]
    : expr_gt                               { $expr = $expr_gt.expr; }
        ( BNL? LT BNL? expr_gt              { $expr = new LTNode($expr, $expr_gt.expr); }
        )*
    ;

expr_gt returns [ExprNode expr]
    : expr_atom                             { $expr = $expr_atom.expr; }
        ( BNL? GT BNL? expr_atom            { $expr = new GTNode($expr, $expr_atom.expr); }
        )*
    ;

expr_atom returns [ExprNode expr]
    : expr_var                              { $expr = $expr_var.expr; }
    | constant                              { $expr = $constant.expr; }
    | LPR expr_add RPR                      { $expr = $expr_add.expr; }
    ;

expr_var returns [RefNode expr]
    : id = ID                               { $expr = new RefNode(scenario.getNamespace(), $id.text); }
    ;

expr_ref returns [RefNode expr]
    : name = NAME DOT id = ID               { $expr = new RefNode($name.text, $id.text); }
    ;

constant returns [ExprNode expr]
    : n = NUM                                       { $expr = new DoubleNode(Double.parseDouble($n.text)); }
    | LBR lb = NUM COMMA ub = NUM RBR               { $expr = new Dist90CINode(Double.parseDouble($lb.text), Double.parseDouble($ub.text)); }
    | LBR a = NUM COMMA b = NUM COMMA c = NUM RBR   { $expr = new DistTriangNode(Double.parseDouble($a.text), Double.parseDouble($b.text), Double.parseDouble($c.text)); }
    | LBR a = NUM COMMA b = NUM RBR UDIST           { $expr = new DistUnifNode(Double.parseDouble($a.text), Double.parseDouble($b.text)); }
    ;